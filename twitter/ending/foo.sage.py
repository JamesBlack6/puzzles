

# This file was *autogenerated* from the file foo.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_4 = Integer(4); _sage_const_3 = Integer(3)
# Calculate the last non-zero digit of x! base p

def last(x,q):
    print(x)
    if x<q:
        return(mod(factorial(x),q))
    else:
        y = floor(x/q)
        r = (mod(x,q)).lift()
        if (mod(y,_sage_const_2 )==_sage_const_1 ):
            return(-last(y,q)*mod(factorial(r),q))
        else:
            return(last(y,q)*mod(factorial(r),q))

d = _sage_const_4 
p = _sage_const_3 
k = _sage_const_2 

print(f"p={p}, k={k}, d={d}")
i = (d-_sage_const_1 )*((p**euler_phi(p**k)-_sage_const_1 )/(p-_sage_const_1 ))+_sage_const_1 
print(f"{i}! ends in {last(i,p^k)} base {p^k}")
#print()

#print(f"p={p}, d={d}")
#i = (d-1)*((p^euler_phi(p^k)-1)/(p-1))+p^(euler_phi(p^k)-1)
#print(f"{i}! ends in {last(i,p^k)} base {p^k}")
#print()

